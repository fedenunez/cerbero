From 6a8c63219c632c27707267b6510dca096c6fd511 Mon Sep 17 00:00:00 2001
From: Youness Alaoui <kakaroto@kakaroto.homelinux.net>
Date: Tue, 5 May 2015 15:07:10 -0400
Subject: [PATCH 4/4] Removing no-op assignment

---
 socket/socket.c | 1
 1 file changed

diff --git a/agent/agent.c b/agent/agent.c
index 259fdc9..0067937 100644
--- a/agent/agent.c
+++ b/agent/agent.c
@@ -4774,7 +4774,8 @@ component_io_cb (GSocket *gsocket, GIOCondition condition, gpointer user_data)
           stream->id, component->id, NICE_COMPONENT_STATE_FAILED);
     }
 
-    component_detach_socket (component, socket_source->socket);
+    component_remove_socket (component, socket_source->socket);
     agent_unlock ();
+    g_object_unref (agent);
     return G_SOURCE_REMOVE;
   }
diff --git a/agent/component.c b/agent/component.c
index 1a1f84a..f45acae 100644
--- a/agent/component.c
+++ b/agent/component.c
@@ -64,6 +64,10 @@ static void
 component_schedule_io_callback (Component *component);
 static void
 component_deschedule_io_callback (Component *component);
+static void
+component_detach_socket (Component *component, NiceSocket *nsock);
+static void
+component_clear_selected_pair (Component *component);
 
 
 void
@@ -164,6 +168,45 @@ component_new (guint id, NiceAgent *agent, Stream *stream)
 }
 
 void
+component_remove_socket (Component *cmp, NiceSocket *nsocket)
+{
+  GSList *i;
+ 
+  for (i = cmp->local_candidates; i;) {
+    NiceCandidate *candidate = i->data;
+    GSList *next = i->next;
+ 
+    if (!nice_socket_is_based_on (candidate->sockptr, nsocket)) {
+      i = next;
+      continue;
+    }
+ 
+    if (candidate == cmp->selected_pair.local) {
+      component_clear_selected_pair (cmp);
+      agent_signal_component_state_change (cmp->agent, cmp->stream->id,
+      cmp->id, NICE_COMPONENT_STATE_FAILED);
+    }
+ 
+    refresh_prune_candidate (cmp->agent, candidate);
+    if (candidate->sockptr != nsocket) {
+      discovery_prune_socket (cmp->agent, candidate->sockptr);
+      conn_check_prune_socket (cmp->agent, cmp->stream, cmp,
+      candidate->sockptr);
+      component_detach_socket (cmp, candidate->sockptr);
+    }
+    agent_remove_local_candidate (cmp->agent, candidate);
+    nice_candidate_free (candidate);
+ 
+    cmp->local_candidates = g_slist_delete_link (cmp->local_candidates, i);
+    i = next;
+  }
+ 
+  discovery_prune_socket (cmp->agent, nsocket);
+  conn_check_prune_socket (cmp->agent, cmp->stream, cmp, nsocket);
+  component_detach_socket (cmp, nsocket);
+}
+
+void
 component_clean_turn_servers (Component *cmp)
 {
   GSList *i;
diff --git a/agent/component.h b/agent/component.h
index 7ded710..0901269 100644
--- a/agent/component.h
+++ b/agent/component.h
@@ -240,7 +240,7 @@ component_set_selected_remote_candidate (NiceAgent *agent, Component *component,
 void
 component_attach_socket (Component *component, NiceSocket *nsocket);
 void
-component_detach_socket (Component *component, NiceSocket *nsocket);
+component_remove_socket (Component *component, NiceSocket *nsocket);
 void
 component_detach_all_sockets (Component *component);
 void
diff --git a/socket/http.c b/socket/http.c
index 404d378..e706dbe 100644
--- a/socket/http.c
+++ b/socket/http.c
@@ -95,6 +95,7 @@ static gboolean socket_is_reliable (NiceSocket *sock);
 static gboolean socket_can_send (NiceSocket *sock, NiceAddress *addr);
 static void socket_set_writable_callback (NiceSocket *sock,
     NiceSocketWritableCb callback, gpointer user_data);
+static gboolean socket_is_based_on (NiceSocket *sock, NiceSocket *other);
 
 NiceSocket *
 nice_http_socket_new (NiceSocket *base_socket,
@@ -126,6 +127,7 @@ nice_http_socket_new (NiceSocket *base_socket,
     sock->is_reliable = socket_is_reliable;
     sock->can_send = socket_can_send;
     sock->set_writable_callback = socket_set_writable_callback;
+    sock->is_based_on = socket_is_based_on;
     sock->close = socket_close;
 
     /* Send HTTP CONNECT */
@@ -642,3 +644,12 @@ socket_set_writable_callback (NiceSocket *sock,
 
   nice_socket_set_writable_callback (priv->base_socket, callback, user_data);
 }
+
+static gboolean
+socket_is_based_on (NiceSocket *sock, NiceSocket *other)
+{
+  HttpPriv *priv = sock->priv;
+
+  return (sock == other) ||
+      (priv && nice_socket_is_based_on (priv->base_socket, other));
+}
diff --git a/socket/pseudossl.c b/socket/pseudossl.c
index 5ad4f97..98a762d 100644
--- a/socket/pseudossl.c
+++ b/socket/pseudossl.c
@@ -116,6 +116,7 @@ static gboolean socket_is_reliable (NiceSocket *sock);
 static gboolean socket_can_send (NiceSocket *sock, NiceAddress *addr);
 static void socket_set_writable_callback (NiceSocket *sock,
     NiceSocketWritableCb callback, gpointer user_data);
+static gboolean socket_is_based_on (NiceSocket *sock, NiceSocket *other);
 
 NiceSocket *
 nice_pseudossl_socket_new (NiceSocket *base_socket,
@@ -152,6 +153,7 @@ nice_pseudossl_socket_new (NiceSocket *base_socket,
   sock->is_reliable = socket_is_reliable;
   sock->can_send = socket_can_send;
   sock->set_writable_callback = socket_set_writable_callback;
+  sock->is_based_on = socket_is_based_on;
   sock->close = socket_close;
 
   /* We send 'to' NULL because it will always be to an already connected
@@ -319,3 +321,11 @@ socket_set_writable_callback (NiceSocket *sock,
 
   nice_socket_set_writable_callback (priv->base_socket, callback, user_data);
 }
+
+static gboolean
+socket_is_based_on (NiceSocket *sock, NiceSocket *other)
+{
+  PseudoSSLPriv *priv = sock->priv;
+  return (sock == other) ||
+       (priv && nice_socket_is_based_on (priv->base_socket, other));
+}
diff --git a/socket/socket.c b/socket/socket.c
index 9c0d978..08ae31a 100644
--- a/socket/socket.c
+++ b/socket/socket.c
@@ -265,6 +265,14 @@ nice_socket_set_writable_callback (NiceSocket *sock,
     sock->set_writable_callback (sock, callback, user_data);
 }
 
+gboolean
+nice_socket_is_based_on (NiceSocket *sock, NiceSocket *other)
+{
+  if (sock->is_based_on)
+    return sock->is_based_on (sock, other);
+  return (sock == other);
+}
+
 void
 nice_socket_free (NiceSocket *sock)
 {
diff --git a/socket/socket.h b/socket/socket.h
index 41ea07b..8275d02 100644
--- a/socket/socket.h
+++ b/socket/socket.h
@@ -88,6 +88,7 @@ struct _NiceSocket
   gboolean (*can_send) (NiceSocket *sock, NiceAddress *addr);
   void (*set_writable_callback) (NiceSocket *sock,
       NiceSocketWritableCb callback, gpointer user_data);
+  gboolean (*is_based_on) (NiceSocket *sock, NiceSocket *other);
   void (*close) (NiceSocket *sock);
   void *priv;
 };
@@ -124,6 +125,23 @@ void
 nice_socket_set_writable_callback (NiceSocket *sock,
     NiceSocketWritableCb callback, gpointer user_data);
 
+/**
+* nice_socket_is_based_on:
+* @sock: a #NiceSocket
+* @other: another #NiceSocket
+*
+* Checks whether @sock wraps @other as a source and destination of its read and
+* write operations. The function traverses the whole chain of @sock's base
+* sockets until @other is found or the end is reached.
+*
+* Returns: %TRUE if @sock is based on @other or if @sock and @other are
+* the same socket, %FALSE otherwise.
+*
+* Since: UNRELEASED
+*/
+gboolean
+nice_socket_is_based_on (NiceSocket *sock, NiceSocket *other);
+
 void
 nice_socket_free (NiceSocket *sock);
 
diff --git a/socket/socks5.c b/socket/socks5.c
index 46d17fb..cdf295a 100644
--- a/socket/socks5.c
+++ b/socket/socks5.c
@@ -81,6 +81,7 @@ static gboolean socket_is_reliable (NiceSocket *sock);
 static gboolean socket_can_send (NiceSocket *sock, NiceAddress *addr);
 static void socket_set_writable_callback (NiceSocket *sock,
     NiceSocketWritableCb callback, gpointer user_data);
+static gboolean socket_is_based_on (NiceSocket *sock, NiceSocket *other);
 
 
 NiceSocket *
@@ -108,6 +109,7 @@ nice_socks5_socket_new (NiceSocket *base_socket,
     sock->is_reliable = socket_is_reliable;
     sock->can_send = socket_can_send;
     sock->set_writable_callback = socket_set_writable_callback;
+    sock->is_based_on = socket_is_based_on;
     sock->close = socket_close;
 
     /* Send SOCKS5 handshake */
@@ -488,3 +490,12 @@ socket_set_writable_callback (NiceSocket *sock,
 
   nice_socket_set_writable_callback (priv->base_socket, callback, user_data);
 }
+
+static gboolean
+socket_is_based_on (NiceSocket *sock, NiceSocket *other)
+{
+  Socks5Priv *priv = sock->priv;
+
+  return (sock == other) ||
+      (priv && nice_socket_is_based_on (priv->base_socket, other));
+}
diff --git a/socket/udp-turn-over-tcp.c b/socket/udp-turn-over-tcp.c
index d97fa04..fb788b3 100644
--- a/socket/udp-turn-over-tcp.c
+++ b/socket/udp-turn-over-tcp.c
@@ -86,6 +86,7 @@ static gboolean socket_is_reliable (NiceSocket *sock);
 static gboolean socket_can_send (NiceSocket *sock, NiceAddress *addr);
 static void socket_set_writable_callback (NiceSocket *sock,
     NiceSocketWritableCb callback, gpointer user_data);
+static gboolean socket_is_based_on (NiceSocket *sock, NiceSocket *other);
 
 NiceSocket *
 nice_udp_turn_over_tcp_socket_new (NiceSocket *base_socket,
@@ -107,6 +108,7 @@ nice_udp_turn_over_tcp_socket_new (NiceSocket *base_socket,
   sock->is_reliable = socket_is_reliable;
   sock->can_send = socket_can_send;
   sock->set_writable_callback = socket_set_writable_callback;
+  sock->is_based_on = socket_is_based_on;
   sock->close = socket_close;
 
   return sock;
@@ -458,3 +460,12 @@ socket_set_writable_callback (NiceSocket *sock,
 
   nice_socket_set_writable_callback (priv->base_socket, callback, user_data);
 }
+
+static gboolean
+socket_is_based_on (NiceSocket *sock, NiceSocket *other)
+{
+  TurnTcpPriv *priv = sock->priv;
+
+  return (sock == other) ||
+      (priv && nice_socket_is_based_on (priv->base_socket, other));
+}
diff --git a/socket/udp-turn.c b/socket/udp-turn.c
index e640363..9075c8e 100644
--- a/socket/udp-turn.c
+++ b/socket/udp-turn.c
@@ -125,6 +125,7 @@ static gboolean socket_is_reliable (NiceSocket *sock);
 static gboolean socket_can_send (NiceSocket *sock, NiceAddress *addr);
 static void socket_set_writable_callback (NiceSocket *sock,
     NiceSocketWritableCb callback, gpointer user_data);
+static gboolean socket_is_based_on (NiceSocket *sock, NiceSocket *other);
 
 static void priv_process_pending_bindings (UdpTurnPriv *priv);
 static gboolean priv_retransmissions_tick_unlocked (UdpTurnPriv *priv);
@@ -243,6 +244,7 @@ nice_udp_turn_socket_new (GMainContext *ctx, NiceAddress *addr,
   sock->is_reliable = socket_is_reliable;
   sock->can_send = socket_can_send;
   sock->set_writable_callback = socket_set_writable_callback;
+  sock->is_based_on = socket_is_based_on;
   sock->close = socket_close;
   sock->priv = (void *) priv;
 
@@ -951,6 +953,15 @@ socket_set_writable_callback (NiceSocket *sock,
 }
 
 static gboolean
+socket_is_based_on (NiceSocket *sock, NiceSocket *other)
+{
+  UdpTurnPriv *priv = sock->priv;
+  
+  return (sock == other) ||
+      (priv && nice_socket_is_based_on (priv->base_socket, other));
+}
+
+static gboolean
 priv_forget_send_request (gpointer pointer)
 {
   SendRequest *req = pointer;
-- 
2.3.2 (Apple Git-55)
